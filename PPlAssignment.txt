
6
Control Structures 
1. Write a program to calculate average of all numbers between n1 and n2(eg.100 to 300 
Read 
values of n1 and n2 from user) 
object slip1 { 
def main(args: Array[String]) { 
var counter: Int=0; 
Var avg: Int; 
Var sum: Int = 0; 
println(“enter n1 and n2”); 
val n1= scala.io.StdIn.readInt(); 
val n2= scala.io.StdIn.readInt(); 
var n = n2-n1; 
for(counter <- n1 to n2) { 
print(counter + " "); 
sum=sum+counter; 
} 
avg= sum/n; 
println(“Average = “+ avg); 
} 
} 
Output // 
C:\Users\shoai\Desktop\SCALA Practical\1>scalac Avg.scala 
 C:\Users\shoai\Desktop\SCALA Practical\1>scala Avg  
enter n1 0  
enter n2 10  
Sum is 55  
average is5.0  
C:\Users\shoai\Desktop\SCALA Practical\1> */ 
 
 
 
2. Write a program to calculate the factorial of a number. 
object slip2 { 
def main(args: Array[String]) { 
var f: Int=1; 
Var i: Int; 
Var n: Int; 
println(“enter n”); 
val n= scala.io.StdIn.readInt(); 
for(i <- 1 to n) { 
f=f * i; 
} 
println(“ Factorial of “ + n + “is = “+ f); 
} 
} 
 
Output// 
/* C:\Users\shoai\Desktop\SCALA Practical\2>scalac Fact.scala 
 C:\Users\shoai\Desktop\SCALA Practical\2>scala Fact  
enter no 6 
 Factorial is 720  
C:\Users\shoai\Desktop\SCALA Practical\2> */ 
 
 
3. Write a program to read five random numbers and check that random 
numbers are perfect 
number or not. 
object slip3{ 
 
def main(args: Array[String]) { 
print("\nHow many numbers you want to calculate: "); 
val n=scala.io.StdIn.readInt(); 
val i:Int=0; 
for(i<-1 to n) 
{ 
print("\n\tENTER NUMBER:"+i+"-->"); 
val n=scala.io.StdIn.readInt(); 
var sum:Int=0; 
for(i<-1 to n-1) 
{ 
if(n%i==0) 
{ 
sum=sum+i; 
} 
} 
if(sum==n) 
println("\n\tNUMBER IS PERFECT"); 
else 
println("\n\tNUMBER IS NOT PERFECT"); 
} 
} 
Output: 
467 is not perfect no. 
415 is not perfect no. 
186 is not perfect no. 
873 is not perfect no. 
6 is perfect no. 
 
 
 
 
4. Write a program to find the second maximum number of four given numbers. 
object slip4 { 
 def main(args: Array[String]) { 
var i : Int =0; 
var a = Array(40,20,10,30,50); 
println("Given Array is :"); 
for(i<-a)  
println(i); 
var temp: Int =0 ;  
for (i <- 0 to 4) 
 {  
for (j <- i+1 to 4)  
{  
if (a(i) > a(j))  
{  
temp = a(i);  
a(i) = a(j);  
a(j) = temp;  
 
}  
}  
}  
println("Sorted Array is :"); 
for(i<- 0 to 4) 
println(a(i)); 
var n: Int = a(3);  
println(" Second Max element is : " +n); 
}} 
 
Output // 
Orginal array: 
10789, 2035, 1899, 1456, 2013, 1458, 2458, 1254, 1472, 2365, 1456, 
2165, 1457, 2456,  
Second largest value of the said array: 2458 
 
 
5 Write a program to calculate sum of prime numbers between 1 to 100 
Method 1: 
object slip5{ 
def isPrime(n: Int) = (2 until n) forall (n % _ != 0) 
def main(args: Array[String]) { 
var sum:Int=0;  
for (i <- 1 to 100 ) 
{ 
if (isPrime(i)) 
{ 
sum=sum+i; 
println(i) 
} 
} 
println("sum= "+sum); 
} 
 
Output // 
 
Output: 
No. is prime no.2 
No. is prime no.3 
No. is prime no.5 
No. is prime no.7 
No. is prime no.11 
No. is prime no.13 
No. is prime no.17 
No. is prime no.19 
No. is prime no.23 
No. is prime no.29 
No. is prime no.31 
No. is prime no.37 
No. is prime no.41 
No. is prime no.43 
No. is prime no.47 
No. is prime no.53 
No. is prime no.59 
No. is prime no.61 
No. is prime no.67 
No. is prime no.71 
No. is prime no.73 
No. is prime no.79 
No. is prime no.83 
No. is prime no.89 
No. is prime no.97 
sum of prime numbers are 1060 
 
 
6. Write a scala program to read an integer from a user and convert it to binary 
and octal using  
user defined functions. 
 
object slip6{ 
 
def decimalToOctal(n:Int)={ 
var num:Int = 0; 
var temp:Int = 1; 
while(num > 0) 
{ 
num = num + ( n % 8) * temp; 
n = n / 8; 
temp = temp* 10; 
} 
return num; 
} 
def decimalToBinary(n:Int) :Long = { 
var i:Int = 0; 
var r:Int = 0; 
var binary: Long = 0; 
var temp : Int = 1; 
while( n>0)  
{ r = n % 2; 
n = n / 2; 
binary = binary + r*temp; 
temp = temp * 10; 
} 
return binary; 
} 
def main(args: Array[String]) { 
println(“enter n”); 
val n= scala.io.StdIn.readInt(); 
println("Equivalent Octal Number : “ + decimalToOctal(n)); 
println("Equivalent Binary Number : “ + decimalToBinary(n)); 
}} 
 
 
 

{ 
  
    var A=Array.ofDim[Int](100,100) 
    println("Enter no. of rows :: ") 
    var m= scala.io.StdIn.readInt() 
        println("\nEnter no. of cols :: ") 
    var n = scala.io.StdIn.readInt() 
        printf("\nEnter values to the matrix :: \n") 
        for (i <- 0 to m-1) 
        { 
            for (j <- 0 to n-1) 
            { 
              A(i)(j)=scala.io.StdIn.readInt() 
              println(A(i)(j)+" "); 
                  
            } 
        } 
  
    println("\nThe given matrix is ::"); 
  
        for (i <- 0 to m-1) 
        { 
            for (j <- 0 to n-1) 
            { 
                print(A(i)(j)+"\t"); 
            } 
            print("\n\n"); 
        } 
   var isUpper = 1; 
    for(row<-0 to m-1) 
    { 
        for(col<-0 to n-1) 
        { 
            if(col<row && A(row)(col)!=0) 
            { 
                isUpper = 0; 
            } 
        } 
    } 
    if(isUpper==1) 
    { 
        println("\nThis is a Upper triangular matrix") 
        for(row<-0 to m-1) 
        { 
            for(col<-0 to n-1) 
            { 
                if(A(row)(col)!= 0) 
                { 
                    print(A(row)(col)+"\t"); 
                } 
                else 
                { 
                    print("\t"); 
                } 
  
            } 
        print("\n\n"); 
        } 
    } 
    else 
    { 
        print("\nThis is Not a Upper triangular matrix."); 
    } 
  
  } 
} 
 
Output: 
Enter no. of rows ::  
 
Enter no. of cols ::  
 
Enter values to the matrix ::  
1  
2  
3  
9  
9  
7  
10  
9  
40  
 
The given matrix is :: 
1 2 3  
 
9 9 7  
 
10 9 40  
 
 
This is Not a Upper triangular matrix. 
 
5. Write a program to sort the matrix using insertion sort. 
 
object InsertionSort { 
  def main(args: Array[String]) { 
    val array = Array.ofDim[Int](2,2) 
    array(0)(0)=3 
    array(0)(1)=2 
    array(1)(0)=1 
    array(1)(1)=0 
    println("Unsorted matrix ") 
    for(i <- 0 until 2){ 
      for(j <- 0 until 2){ 
        print(array(i)(j)+"\t") 
      } 
      println() 
    } 
    println("Asceding sorted matrix ") 
    var temp=0 
    var a:Int=0 
    var b:Int=0 
    for (a <- 0 until 2) { 
      for (b <- 0 until 2){ 
        if(a==0 && b==0){} 
        else{ 
          temp = array(a)(b) 
        } 
        var k = a 
        var l = b 
        while (k >= 0 && l>=0 && temp < array(a)(b)) { 
          array(a + 1)(b + 1) = array(a)(b) 
            k = k-1; 
            l = l-1; 
        } 
          array(a)(b) = temp  
          print(array(a)(b)+"\t") 
      } 
      println() 
    } 
  } 
} 
 
Output: 
Unsorted matrix  
3 2  
1 0  
Asceding sorted matrix  
0 2  
1 3  
 
6. Write a program for multiplication of two matrices(Validate 
number of rows and columns 
before multiplication and give appropriate message) 
 
object Multiplication 
{ 
  def main(args : Array[String]) 
  { 
    var mat1 = Array.ofDim[Int](10,10) 
    var mat2 = Array.ofDim[Int](10,10) 
    var add = Array.ofDim[Int](10,10) 
    var sum = 0 
     
    println("Enter no. of rows of 1st matrix element") 
    var r1 = scala.io.StdIn.readInt() 
    println("Enter no. of columns of 1st matrix element") 
    var c1 = scala.io.StdIn.readInt() 
     
    println("Enter 1st matrix elements") 
    for(i <- 1 to r1) 
      for(j <- 1 to c1) 
      { 
        mat1(i)(j) = scala.io.StdIn.readInt() 
      } 
       
    println("1st Matrix:") 
    for(i <- 1 to r1) 
    { 
      for(j <- 1 to c1) 
      { 
        print(mat1(i)(j)+"\t") 
      } 
      print("\n\n") 
    } 
     
     println("Enter no. of rows of 2nd matrix element") 
    var r2 = scala.io.StdIn.readInt() 
    println("Enter no. of columns of 2nd matrix element") 
    var c2 = scala.io.StdIn.readInt() 
     
    println("Enter 2nd matrix elements") 
    for(i <- 1 to r2) 
      for(j <- 1 to c2) 
      { 
        mat2(i)(j) = scala.io.StdIn.readInt() 
      } 
       
    println("2nd Matrix:") 
    for(i <- 1 to r2) 
    { 
      for(j <- 1 to c2) 
      { 
        print(mat2(i)(j)+"\t") 
      } 
      print("\n\n") 
    } 
     
    for(i <- 1 to r1) 
    { 
      for(j <- 1 to c2) 
      { 
        sum = 0 
        add(i)(j) = 0 
        sum=mat1(i)(j)+mat2(i)(j) 
        add(i)(j) = sum 
      } 
    } 
     
    println("Addition of matrices:") 
    for(i <- 1 to r1) 
    { 
      for(j <- 1 to c2) 
      { 
        print(add(i)(j)+"\t") 
      } 
      println("\n") 
    } 
     
  } 
} 
 
Output: 
Enter no. of rows of 1st matrix element 
Enter no. of columns of 1st matrix element 
Enter 1st matrix elements 
1st Matrix: 
10 8 15  
 
21 16 10  
 
20 11 25  
 
Enter no. of rows of 2nd matrix element 
Enter no. of columns of 2nd matrix element 
Enter 2nd matrix elements 
2nd Matrix: 
11 20 35  
 
25 16 4  
 
20 10 15  
 
Addition of matrices: 
21 28 50  
 
46 32 14  
 
40 21 40 



Output: 
Scala List: 
Lisp style: 
List(101, 226, 30) 
Java style: 
List(1, 2, 3, 4, 5, 6, 7) 
Range List: 
List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14) 
List(0, 2, 4, 6, 8, 10, 12, 14, 16, 18) 
Uniform  List: 
List(PPL, PPL, PPL) 
Tabulated List: 
List(0, 1, 8, 27, 64) 
 
 
2. Create two Lists and Merge it and store the sorted in ascending order. 
 
object MainObject{   
    def main(args:Array[String]){   
        var list = List(1,8,5,6,9,58,23,15,4)   
        var list2 = List(88,100)   
        print("Elements: ")   
       list.foreach((element:Int) => print(element+" "))        // Iterating using foreach loop   
        //print("\nElement at 2 index: "+list(2))             // Accessing element of 2 index   
        var list3 = list ++ list2                               // Merging two list   
        print("\nElement after merging list and list2: ")   
        list3.foreach((element:Int)=>print(element+" "))       
        var list4 = list3.sorted                            // Sorting list   
        print("\nElement after sorting list3 in ascending order: ")   
        list4.foreach((element:Int)=>print(element+" "))     
        var list5 = list3.reverse                           // Reversing list elements   
    }   
}   
 
Output: 
Elements: 1 8 5 6 9 58 23 15 4  
Element after merging list and list2: 1 8 5 6 9 58 23 15 4 88 100  
Element after sorting list3 in ascending order: 1 4 5 6 8 9 15 23 58 88 100 
 
 
3. Create a list of integers divisible by 3 from List containing numbers from 1 to 50. 
object List_int{ 
def main(args:Array[String]) 
{ 
val x=List.range(1,50) 
println("Number divided by 3") 
for 
{ 
i<-x 
if i%3==0 
} 
println(i) 
} 
} 
 
Output: 
Number divided by 3 
3 
6 
9 
12 
15 
18 
21 
24 
27 
30 
33 
36 
39 
42 
45 
48 
 
 
4. Create a list of even numbers up to 10 and calculate its product. 
 
object Scala_List 
{ 
  def main(args: Array[String]): Unit =  
{ 
   val nums = List(1, 2, 3, 4 , 5 , 6 , 7 , 8 , 9 , 10) 
   println("Original list:") 
   println(nums)    
   val even_nums = nums.filter(_ % 2 ==0)  
   println("Even number of the  list:") 
   println(even_nums) 
   val result = even_nums.product 
   println("product: ") 
   println(result) 
    
   
  } 
} 
Output: 
Original list: 
List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10) 
Even number of the  list: 
List(2, 4, 6, 8, 10) 
product:  
3840 
 
 
5. Write a program to create list with 10 members using function 3n2+4n+6 
import scala.collection.mutable._ 
object List5 
{ 
def main(args: Array[String])  
{ 
val x= List.tabulate(10)(n => 3*n * n + 4*n +6)  
println("x list is" +x); 
} 
} 
 
6. Write a program to create a list of 1 to 100 numbers. Create second list from 
first list 
selecting numbers multiple of 10. 
import scala.collection.mutable._ 
 
object List6 
{ 
def main(args: Array[String])  
{ 
val x1= List.range(1,100) 
val x2 = x1.filter(a => a % 10 == 0) 
println("x1 list is" +x1); 
println("x2 list is" +x2); 
} 
 
 
 
7. Create a list of 50 members using function 2n+3. Create second list excluding 
all elements 
multiple of 7. 
import scala.collection.mutable._ 
object List7 
{ 
def main(args: Array[String])  
{ 
val x1= List.tabulate(50)(n => 2* n + 3)  
val x2 = x1.filter(a => a % 7 == 0) 
println("x1 list is" +x1); 
println("x2 list is" +x2); 
} 
} 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
        Maps 
1. Write a user defined functions to convert lowercase letter to uppercase and call the 
function 
using Map. 
 
 
import scala.collection.immutable._ 
import scala.collection.mutable._ 
  
object Mapconvert{ 
  def main(arg: Array[String]) 
  { 
    var a = readLine("Enter the letter") 
    con(a) 
  } 
  def con(a : String) : Unit = 
  { 
    var cap = a.map(c => c.toUpper) 
    println(cap) 
  } 
} 
 
********OUTPUT******** 
List(xyz, lmn) 
List(ABC, PQR) 
 
2. Write a program to create maps with Rollno and FirstName. Print all student information 
with 
same FirstName. 
object map2 { 
def main(args: Array[String]) { 
val student = Map("A101" -> "Amit", "A102" -> "Vikas","A103" -> "Seema") 
student.keys.foreach{ i => 
print( "Key = " + i ) 
println(" Value = " + student(i) )} 
} 
} 
Output : 
Key = A101 Value = Amit 
Key = A102 Value = Vikas 
Key = A103 Value = Seema 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
Set 
1. Write a program to create two sets and find common elements between them. 
 
import scala.collection.mutable._ 
object Inter  
{ 
def main(args: Array[String])  
{ 
var a=Set(1,2,3,4,5); 
var b=Set(6,7,2,3,1); 
println("set is"+a ); 
println("set is"+b ); 
val i = a.intersect(b); 
println("intersection is" +i); 
} 
} 
********OUTPUT******** 
set isSet(1, 5, 2, 3, 4) 
set isSet(1, 2, 6, 3, 7) 
intersection isSet(1, 2, 3) 
 
2. Write a program to display largest and smallest element of the Set 
object setmaxmin { 
def main(args: Array[String]) { 
val num = Set(5,6,9,20,30,45) 
// find min and max of the elements 
println( "Min element in Set : " + num.min ) 
println( "Max element in Set : " + num.max ) 
} 
} 
Output: 
Min element in Set : 5 
Max element in Set :45 
 
3. Write a program to merge two sets and calculate product and average of all 
elements of the 
Set 
object setmerge { 
def main(args: Array[String]) { 
val num1 = Set(5,16,9,20,30); 
val num2 = Set(15,3,7) 
val num3 = num1.++(num2) 
val result = num3.sum 
val avg = result / (num3.count) 
val prod = num3.product 
println( "Average of Set Element is : " + avg ) 
println( "Product of element in Set : " + prod ) 
} 
} 
Output: 
println("num1 list is" +num1); 
println("num2 list is" +num2); 
println("num3 list is" +num3); 
Average of Set Element is : 10 
Product of element in Set :13608000